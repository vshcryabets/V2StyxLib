name: CMake test C++

on:
  pull_request:
    types: [ ready_for_review ]

permissions:
  pull-requests: write
  contents: read

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_and_test:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Set up GCC 14
      uses: arikw/setup-gcc@v1
      with:
        version: 14

    - uses: actions/checkout@v4

    - name: Create build directory and run CMake
      run: |
        sudo apt-get -y update
        sudo apt-get install -y cmake

    - name: Configure CMake
      working-directory: ${{github.workspace}}/
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -S ${{github.workspace}}/cpp -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      working-directory: ${{github.workspace}}/
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Run CTest
      working-directory: ${{github.workspace}}/build/
      run: ctest --rerun-failed --output-on-failure

  convert_to_draft:
    name: Convert to Draft on Failure
    runs-on: ubuntu-latest

    needs: build_and_test

    if: always() && needs.build_and_test.result == 'failure'

    steps:
      - name: Convert PR to Draft
        run: |
          gh pr convert-to-draft ${{ github.event.pull_request.number }} --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}